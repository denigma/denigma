Setting up Denigma
==================

In order to set up Denigma locally just do the following.

1. Git in:
Go to the GIT bootcamp: https://github.com/

2. Fork Denigma:
git clone https://github.com/hevok/denigma

3. Start Denigma:
cd denigma
virtualenv env
. env/bin/activate
pip install -r requirements/project.txt
denigma/manage.py syncdb --all
denigma/manage.py migrate --fake
denigma/manage.py runserver

4. Change Denigma:
git commit -am "Brief description of the change."
git push origin master


Deploying Denigma
=================

To deploy Denigma in the clouds the Amazone Web Service (AWS) is used.

1. Launch an Ubuntu AMI:
Preferable a maverick build such as the ami-975a6de3 (called Giter; which ships
 a GIT repository) or the ami-fd7b4089 (called Daily which is up-to-date and 
does not require updating/upgrading).
Set up of Giter takes approximately 7 minutes and the Daily takes 3 minutes 
due to the already installed updates.

2. Create and mount an seperate EBS Volume to it.

3. ssh into the machine with the DNS and keypairs aquired from the Amazone 
Control Center (use bash ami.sh). On the machine:
sudo su
cd ..
aptitude install git # Only on Daily, not necessary on Giter. 
git clone https://github.com/hevok/denigma
bash denigma/configure.sh


Developmental Notes
===================

Serving Media
-------------
The media/static files for the Admin Interface were intially not used and there it was unstyled.
To solve this issue:

1. Add the following line to the Apache config file (/etc/apache2/http.conf):
Alias /django/contrib/admin/media/ /home/denigma/env/lib/python2.6/site-packages/django/contrib/admin/media/

2. Set in the settings.py:
ADMIN_MEDIA_PREFIX = '/django/contrib/admin/media/'

Similiar Pinax static files were also not used right after deploying.
Copying of the static files from the pinax_theme_botstrat/static/ into project/site/media and project/site/statics solved this problem: 

cp -rf /home/denigma/env/lib/python2.6/site-packages/pinax_theme_bootstrap/static/. /home/denigma/denigma/media

Hower removing this files again did not abolished the styling.

'bool' object has no attribute 'status code'
--------------------------------------------

It appears that the pinax.middleware.security.HideSensitiveFieldsMiddleware in the MIDDLEWARE_CLASSES of the settings.py is causing an error which propagates and makes debuging nearly impossible [http://comments.gmane.org/gmane.comp.python.django.pinax.devel/104].

Deactivating it by commenting out abrogates this problem. Consider to inlcude it with an if statement only in debuging mode.


Missing Markup
--------------

In the wiki view.html the load markup tag raised an error. Including the "django.conrib.markup" in the settings.py fixed it [http://stackoverflow.com/questions/6399649/django-markup-templatetags-error].


CSRF Problem
------------
Submit forms such as those in the Wiki edit and search need to be tagged with a {% csrf_token %}.
This worked fine for the edit form [http://jordanmessina.com/2010/05/24/django-1-2-csrf-verification-failed/]. However it failed on the search form. Deactivating by commenting out the django.middleware.csrf.CsrfViewMiddleware in the MIDDLEWARE_CLASSES resolved this problem, but is only a suboptimal solution. Adding a RequestContext handler to the render_to_response in the search view which was already present in the edit view resolved this issue [http://stackoverflow.com/questions/3197321/csrf-error-in-django].


mysql in virtual env 
--------------------
For interfacing with mysql of the purpose of database evolition libmysqlclient16-dev library is required [http://stackoverflow.com/questions/8868545/installing-mysql-for-python-within-virtual-environment].
Note that the Ubuntu 12.04 repository does not contain these spcific library anymore, but rather that provides libmysqlclient-dev [http://askubuntu.com/questions/137788/problem-with-deleting-libmysqlclient16-dev-from-repository-of-12-04].

aptitude install libmysqlclient16-dev
pip install MySQL-python


Depricated Constants
--------------------

Runnig python denigma/manage.py migrate --list just returns that ENGINE is depriciated [http://jira.osqa.net/browse/OSQA-712].


Adding South
------------
South enables schema and data migration of a django-backend database [http://www.djangopro.com/2011/01/django-database-migration-tool-south-explained/].
Migrations should be version-controlled [http://stackoverflow.com/questions/10083130/what-is-the-correct-way-to-deal-with-db-migration-while-using-south-django-and].
In order to add South to Django project, development & production do the following [http://stackoverflow.com/questions/4035296/adding-south-to-django-project-development-production]: 

./manage.py snycdb
./manage.py convert_to_south myproject.myapp

Change models
./manage.py schemamigration pyproject.myapp --auto
./manage.py migrate myproject.myapp


Alternatively to get a fresh Django database with existing South migrations sync all tables and perform fake migration [http://www.troeger.eu/cms/?p=317].

./manage.py syncdb --all
./manage.py migrate --fake

If required south can be resetted [http://lincolnloop.com/blog/2011/jun/20/resetting-your-south-migrations/; https://groups.google.com/forum/?fromgroups#!topic/south-users/PxEskcnkibc[1-25]; https://groups.google.com/forum/#!msg/south-users/iIQT8ZWs2cI/GQ4kONoT5Q4J[1-25]]

mysql-ebs
---------

# Prepare db for snapshot:
mysql -u root
FLUSH TABLES WITH READ LOCK;
SHOW MASTER STATUS;
SYSTEM sudo xfs_freeze -f /vol

# Create Snapshot

# Release lock:
SYSTEM sudo xfs_freeze -u /vol
UNLOCK TABLES;
EXIT

# Clean up:
sudo /etc/init.d/mysql stop
sudo umount /etc/mysql /var/lib/mysql /var/log/mysql /vol


Restoring a snapshotted database
--------------------------------

bash denigma/reconnect-ebs.sh

bash denigma/open-port.sh

sudo bash ./denigma/aws-django -n denigma -d https://github.com/hevok/denigma/raw/master/denigma.tgz -s "/s" -H <DNS> -D denigma -U denigma -P <PASSWORD>


Transferring data onto EC2
--------------------------

It is considered to transfer the Denigma database directly onto an EC2 instance. SFTP (secruity file transfer protocol) can be used via port 22 to directly exchange data with the EC2 instance. FileZilla can be used for this purpose [http://www.turnkeylinux.org/forum/support/20100413/how-do-you-get-data-and-out-ec2].
Add the keypair via settings [http://www.codestore.net/store.nsf/unid/BLOG-20111012-0812].
Settings in Ubuntu are at the terminal bar [http://superuser.com/questions/159846/change-filezilla-settings-in-ubuntu-linux-so-view-edit-uses-gedit].
Convert the keypair from .pem to .pkk [http://www.onebloke.com/2011/06/filezilla-sftp-and-amazon-ec2/].

sudo aptitude install filezilla

> Open the Site Manage
Host: <DNS>
Port: 22
Logon Type: Norma
User: Ubuntu 

> Edit > Settings
SFTP > Add keyfile...
Convert key

It is noted that when FileZilla transferes data to a EC2 instance it results into a block of the internet connection.
Possible another port such as 21 has to be prefered for connecting to an EC2 instance via sFTP.

Customizing Django Admin
------------------------

Creating a admin folder in project template directory and modifying the original admin templates in this folder allows to do basic customization of the admin interface.
In this way for instance the title can be changed [http://overtag.dk/wordpress/2010/04/changing-the-django-admin-site-title/].


Database Renaming
-----------------

There are several ways on how to rename a database. The simplist appears to use a strict which renames all tables in conjuction with another database table [http://stackoverflow.com/questions/67093/how-do-i-quickly-rename-a-mysql-database-change-schema-name].


Tagging
-------

Django tagging impairs south schema migration. It raises an NoMigration exception similiar as reported for django.contrib.auth [http://stackoverflow.com/questions/2845697/south-migration-error-nomigrations-exception-for-django-contrib-auth].


sqlite
------

sqlite is a leightweight sql database variant. There are two versions of sqlite3.

One is a python module, the other is a executable application.
The manage.py dbshell uses the latter one and complains if it is not installed [https://groups.google.com/forum/?fromgroups#!topic/django-users/4YMFm1C14tk[1-25]].


Domain forwarding
-----------------

How to set up domain forwarding so that it
only replaces the base address?

Just to explain the problem:

Let's assume you have a server address (http://myserver.com) and you have
full root control over the server. You also have a domain (e.g. from 1&1) which
you can set up either to http or frame forwarding (http://mydomain.org).

If you do http-forwarding http://mydomain.com just redirects to the server
address (http://myserver.com) and subfolders
(http://myserver.com/subfolder/) are displayed correctly.

So if you made a frame forwarding to http://myserver.com and it works as it
displays http://mydomain.org in the address bar and the content of
http://myserver.com but if you when navigate on the site tree it does not show
any "subfolder", e.g. http://myserver.com/subfolder/. Rather than it
just converts everything to http://mydomain.org in the address bar.

So now the question is how to set it up that it displays the domain name
and the subfolders, e.g. http://mydomain.org/subfolder/, and only
replaces the base address of the server?

A possibility would be to edit the .htaccesa file
[http://support.lunarpages.com/knowledge_bases/article/549].

The .htaccess file: [http://en.wikipedia.org/wiki/Htaccess].

Using .htaccess [http://www.joeldare.com/wiki/linux:using_.htaccess_on_ubuntu].

Enabling user of .htaccess [https://help.ubuntu.com/community/EnablingUseOfApacheHtaccessFiles].

DNS setup: the full story: http://support.webvanta.com/support_article/615695-dns-setup-the-full-story#Makingthebasedomainnamework

Same issue: http://stackoverflow.com/questions/10112953/url-subfolders-not-shown-while-using-yahoo-maked-forwarding

Exactly the same problem: http://stackoverflow.com/questions/2208728/forwarding-from-domain-names-whithout-using-frames?rq=1

UNIX
----

Take the opportinuty to venture in to the wonderful land of UNIX. It will make your life much, much easier. If you havve the option, install Linux beside your Windows in a dual boot setting and after that, Django and ALL Django app godness is just one command away.

Most hosting environents use Linux, that's why it is better to use Linux for development too.

Linux + nginx + uwsgi = awesome


Usage Considerations
====================

Storage of data on an EBS snapshot is cheap [https://forums.aws.amazon.com/message.jspa?messageID=172925].
Pricing for EBS snapshots:
- Daily: bytes*24
- Monthly:bytes*24*dayes of the months




TODO
====

- Need to get GIT from Denigma server working.
- restore.sh for restoring a snapshotted database.
- Automate EC2 instance setup [http://www.turnkeylinux.org/blog/ec2-userdata].
- Use Fabric for ssh control of Denigma [http://docs.fabfile.org/en/1.4.3/index.html].


