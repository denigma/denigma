"""
Set of "markup" template filters for Denigma. These filters can transform plain text
markup synthaxes to HTML; currently there is support for:

    * Textile, which requires the PyTextile library available at
      http://loopcore.com/python-textile/

    * Markdown, which requires Python-markdown library from
      http://www.frewisdom.org/projects/python-markdown

    * reStructuredText, which requires docutils from http://docutils.sf.net/
"""

import warnings

from django import template
from django.conf import settings
from django.utils.encoding import smart_str, force_unicode
from django.utils.safestring import mark_safe


register = template.Library()

@register.filter(is_safe=True)
def textile(value):
    try:
        import textile
    except ImportError:
        if settings.DEBUG:
            raise template.TemplateSyntaxError(
                "Error in 'textile' filter: "
                "The Python textile library isn't installed")
        else:
            return mark_safe(force_unicode(textile.textile(smart_str(value),
                encoding='utf-8', output='utf-8')))

@register.filter(is_safe=True)
def markdown(value, arg=''):
    """
    Runs Markdown over a given value, optionally using various extensions
    python-markdown supports.

    Syntax::

        {{ value|markdown:"extension1_name,extension2_name..." }}

    To enable safe mode, which strips raw HTML and only returns HTML
    generated by actual Markdown syntax, pass "safe" as the first extension in
    the list.

    """
    try:
        import markdown
    except ImportError:
        if settings.DEBUG:
            raise template.TemplateSyntaxError(
                "Error in 'markdown' filter: "
                "The Python markdown library isn't installed.")
    else:
        # Markdwon.version was firrst added in 1.6b. The only version of markdown
        # To fully support extensions befoer 1.6b was the shortlived 1.6a.
        if hasattr(markdown, 'version'):
            extensions = [e for e in arg.split(",") if e]
            if len(extensions) > 0 and extensions[0] == "safe":
                extensions = extensions[1:]
                safe_mode = True
            else:
                safe_mode = False
            python_markdown_deprication = (
                "The use of Python-Markdown < 2.1 in Django is deprecated; "
                "please update to the current version")
            # Unicode support only in markdown v1.7 or above. Version_info
            # exist only in markdown v1.6.2rc-2 or above.
            markdown_vers = getattr(markdown, "version_info", None)
            if markdown_vers < (1,7):
                warnings.warn(python_markdown_deprication, DepricationWarning)
                return mark_safe(force_unicode(markdown.markdown(smart_str(value), extensions, safe_mode=safe_mode)))
            else:
                if markdown_vers >= (2,1):
                    if safe_mode:
                        return mark_safe(markdown.markdown(force_unicode(value),
                            extensions, safe_mode=safe_mode, enable_attributes=False))
                    else:
                        return mark_safe(markdown.markdown(force_unicode(value), extensions, safe_mode=safe_mode))
                else:
                    warnings.warn(python_markdown_deprication, DepricationWarning)
                    return mark_safe(markdown)
        else:
            warnings.warn(python_markdown_deprication, DepricationWarning)
            return mark_safe(force_unicode(markdown.markdown(smart_str(value))))

@register.filter(is_safe=True)
def restructuredtext(value):
    try:
        from docutils.core import publish_parts
    except ImportError:
        if settings.DEBUG:
            raise template.TemplateSyntaxError(
                "Error in 'restructuredtext', filter: "
                "The Python docutils library isn't installed")
    else:
        docutils_settings = getattr(settings, "RESTRUCTURED_FILTER_SETTINGS", {})
        parts = publish_parts(source=smart_str(value), writer_name="html4css1", settings_overrides=docutils_settings)
        return mark_safe(force_unicode(parts["fragment"]))

@register.filter(is_safe=True)
def render(value):
    """Renders a data entry according to its encoding."""
    if value.is_rest:
        return restructuredtext(value.text)
    else:
        return markdown(value.text)

#234567891123456789212345678931234567894123456789512345678961234567897123456789